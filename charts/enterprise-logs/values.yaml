# The default values specified in this file are enough to deploy all of the
# Grafana Enterprise Logs microservices but are not suitable for production
# load.
# To configure the resources for production load, refer to the the small.yaml or
# large.yaml values files.

# Container image settings.
# Since the image is unique for all microservices, so are image settings.
image:
  repository: grafana/enterprise-logs
  tag: v1.1.0
  pullPolicy: IfNotPresent
  # Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  # pullSecrets:
  #   - myRegistryKeySecretName

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - /
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

serviceAccount:
  create: true
  name:
  annotations: {}

useExternalConfig: false
externalConfigSecretName: 'enterprise-logs-config'
externalConfigVersion: '0'

# In order to use Grafana Enterprise Logs features, you will need to provide the contents of your Grafana Enterprise Logs
# license, either by providing the contents of the license.jwt, or the name Kubernetes Secret that contains your license.jwt.
# To set the license contents, use the flag `--set-file 'license.contents=./license.jwt'`
# To use your own Kubernetes Secret, `--set license.external=true`.
useExternalLicense: false
license:
  contents: "NOTAVALIDLICENSE"
  external: false
  secretName: 'enterprise-logs-license'

tokengenJob:
  enable: true
  extraArgs: {}
  env: []
  annotations: {}

admin_api:
  replicas: 1

  annotations: {}
  service:
    annotations: {}
    labels: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  podLabels: {}
  podAnnotations: {}

  securityContext: {}

  extraArgs: {}

  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  resources:
    requests:
      cpu: 10m
      memory: 32Mi

  extraContainers: []
  extraVolumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  terminationGracePeriodSeconds: 60

gateway:
  # If you want to use your own proxy URLs, set this to false.
  useDefaultProxyURLs: true
  replicas: 1

  annotations: {}
  service:
    annotations: {}
    labels: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  podLabels: {}
  podAnnotations: {}

  securityContext: {}
  initContainers: []

  extraArgs: {}

  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  resources:
    requests:
      cpu: 10m
      memory: 32Mi

  extraContainers: []
  extraVolumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  terminationGracePeriodSeconds: 60

lokidistributed:
  gateway:
    enabled: false
  compactor:
    enabled: true
  loki:
    image:
      repository: grafana/enterprise-logs
      tag: v1.1.0
    # this config is also used for Admin API and Gateway. I can't tell the subchart to look in gel so I'm telling gel to look here
    config: |
      auth:
        type: enterprise

      server:
        http_listen_port: 3100

      cluster_name: enterprise-logs-test-fixture

      license:
        path: /etc/ge-logs/license/license.jwt

      ingester:
        lifecycler:
          ring:
            kvstore:
              store: memberlist
            replication_factor: 1

      memberlist:
        abort_if_cluster_join_fails: false
        bind_port: 7946
        join_members:
          - ge-logs-discovery

      admin_client:
        storage:
          type: s3
          s3:
            endpoint: minio:9000
            bucket_name: grafana-logs-admin
            access_key_id: minio
            secret_access_key: minio123
            insecure: true



      storage_config:
        aws:
          s3: http://minio:minio123@minio:9000
          bucketnames: grafana-logs-data
          s3forcepathstyle: true
        boltdb_shipper:
          active_index_directory: /data/boltdb-shipper-active
          cache_location: /data/boltdb-shipper-cache
          cache_ttl: 24h
          shared_store: s3

      schema_config:
        configs:
          - from: 2021-01-01
            store: boltdb-shipper
            object_store: aws
            schema: v11
            index:
              prefix: index_
              period: 24h

      compactor:
        working_directory: /data/boltdb-shipper-compactor
        shared_store: s3