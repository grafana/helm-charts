# The default values specified in this file are enough to deploy all of the
# Grafana Enterprise Logs microservices but are not suitable for production
# load.
# To configure the resources for production load, refer to the the small.yaml or
# large.yaml values files.

# Container image settings.
# Since the image is unique for all microservices, so are image settings.
image:
  repository: grafana/enterprise-logs
  tag: v1.1.0
  pullPolicy: IfNotPresent
  # Optionally specify an array of imagePullSecrets.
  # Secrets must be manually created in the namespace.
  # ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  # pullSecrets:
  #   - myRegistryKeySecretName

serviceAccount:
  create: true
  name:
  annotations: {}

useExternalConfig: false
externalConfigSecretName: 'enterprise-logs-config'
externalConfigVersion: '0'

# In order to use Grafana Enterprise Logs features, you will need to provide the contents of your Grafana Enterprise Logs
# license, either by providing the contents of the license.jwt, or the name Kubernetes Secret that contains your license.jwt.
# To set the license contents, use the flag `--set-file 'license.contents=./license.jwt'`
# To use your own Kubernetes Secret, `--set license.external=true`.
useExternalLicense: false
license:
  contents: "NOTAVALIDLICENSE"
  external: false
  secretName: 'enterprise-logs-license'

tokengenJob:
  enable: true
  extraArgs: {}
  env: []
  annotations: {}

config:
  server:
    http_listen_port: 3100
    grpc_listen_port: 9095

runtimeConfig: {}

rbac:
  create: true
  pspEnabled: true

admin_api:
  replicas: 1

  annotations: {}
  service:
    annotations: {}
    labels: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  podLabels: {}
  podAnnotations: {}

  securityContext: {}

  extraArgs: {}

  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  resources:
    requests:
      cpu: 10m
      memory: 32Mi

  extraContainers: []
  extraVolumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  terminationGracePeriodSeconds: 60

gateway:
  # If you want to use your own proxy URLs, set this to false.
  useDefaultProxyURLs: true
  replicas: 1

  annotations: {}
  service:
    annotations: {}
    labels: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  podLabels: {}
  podAnnotations: {}

  securityContext: {}
  initContainers: []

  extraArgs: {}

  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  resources:
    requests:
      cpu: 10m
      memory: 32Mi

  extraContainers: []
  extraVolumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  terminationGracePeriodSeconds: 60


compactor:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources:
    requests:
      cpu: 100m
      memory: 512Mi

  # Additional Grafana Enterprise Metrics container arguments, e.g. log level (debug, info, warn, error)
  extraArgs: {}

  # Pod Labels
  podLabels: {}

  # Pod Annotations
  podAnnotations: {}

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - compactor
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  persistentVolume:
    # If true compactor will create/use a Persistent Volume Claim
    # If false, use emptyDir
    #
    enabled: true

    # compactor data Persistent Volume Claim annotations
    #
    annotations: {}

    # compactor data Persistent Volume access modes
    # Must match those of existing PV or dynamic provisioner
    # Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    #
    accessModes:
      - ReadWriteOnce

    # compactor data Persistent Volume size
    #
    size: 2Gi

    # Subdirectory of compactor data Persistent Volume to mount
    # Useful if the volume's root directory is not empty
    #
    subPath: ''


    # compactor data Persistent Volume Storage Class
    # If defined, storageClassName: <storageClass>
    # If set to "-", storageClassName: "", which disables dynamic provisioning
    # If undefined (the default) or set to null, no storageClassName spec is
    #   set, choosing the default provisioner.  (gp2 on AWS, standard on
    #   GKE, AWS & OpenStack)
    #
    # storageClass: "-"

  livenessProbe:
    failureThreshold: 20  # 10 minutes failure threshold
    httpGet:
      path: /ready
      port: http-metrics
      scheme: HTTP
    initialDelaySeconds: 180
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 60

  securityContext: {}

  strategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 240

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []


minio:
  enabled: true
  accessKey: enterprise-logs
  buckets:
    - name: enterprise-logs-tsdb
      policy: none
      purge: false
    - name: enterprise-logs-admin
      policy: none
      purge: false
    - name: enterprise-logs-ruler
      policy: none
      purge: false
  persistence:
    size: 5Gi
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  secretKey: supersecret

lokidistributed:
  gateway:
    enabled: false
  compactor:
    enabled: false
  loki:
    image:
      repository: grafana/enterprise-logs
      tag: v1.1.0
    # this config is also used for Admin API and Gateway. I can't tell the subchart to look in gel so I'm telling gel to look here
    config: |
      auth_enabled: true

      auth:
        type: enterprise
      
      cluster_name: enterprise-logs-test-fixture

      admin_client:
        storage:
          type: s3


      compactor:
        shared_store: s3
        working_directory: /data/boltdb-shipper-compactor


      license:
        path: "/license/license.jwt"

      ingester:
        lifecycler:
          num_tokens: 512
          ring:
            replication_factor: 3
            kvstore:
              store: memberlist

      limits_config:
        reject_old_samples: true
        reject_old_samples_max_age: 168h

      server:
        http_listen_port: 3100
        grpc_listen_port: 9095

      ingester_client:
        grpc_client_config:
          max_recv_msg_size: 104857600
          max_send_msg_size: 104857600

      memberlist:
        abort_if_cluster_join_fails: false
        bind_port: 7946
        join_members:
          - gel-lokidistributed-memberlist

      distributor:
        ring:
          kvstore:
            store: memberlist

      querier:
        query_ingesters_within: 12h

      query_range:
        split_queries_by_interval: 24h
        align_queries_with_step: true
        cache_results: true
        results_cache:
          cache:
            memcached:
              expiration: 1h
            memcached_client:
              timeout: 1s

      schema_config:
        configs:
          - from: 2021-01-01
            store: boltdb-shipper
            object_store: aws
            schema: v11
            index:
              prefix: index_
              period: 24h

      storage_config:
        aws:
          s3: http://enterprise-logs:supersecret@gel-minio:9000
          bucketnames: enterprise-logs-tsdb
          s3forcepathstyle: true
          insecure: true
        boltdb_shipper:
          active_index_directory: /var/loki/index
          cache_location: /var/loki/cache
          cache_ttl: 24h
          shared_store: s3

      ruler:
        enable_alertmanager_discovery: false
        enable_api: true
        enable_sharding: true
        ring:
          kvstore:
            store: memberlist
        rule_path: '/var/loki'

      frontend:
        log_queries_longer_than: 10s