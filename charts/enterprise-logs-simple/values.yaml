# DEPRECATED
# This chart is now deprecated and will no longer be updated. Grafana Enterprise Logs v1.4.0 is included in the `loki-simple-scalable` chart which implements Grafana Enterprise Logs as an option (`enterprise.enabled: true`).
# -----------------------------------------
# Configuration for `enterprise-logs` chart
# -----------------------------------------

# -- Overrides the chart's name
nameOverride: null

# -- Overrides the chart's computed fullname
fullnameOverride: null

# -- Definition of the Docker image for Grafana Enterprise Logs
# If the image block is overwritten in a custom values file, it is also
# required to update the values in the `loki-simple-scalable.loki.image` block.
# This can be done by copying the values, or like here, by using an anchor and
# a pointer.
image: &image  # -- The container registry to use
  registry: docker.io
  # -- The image repository to use
  repository: grafana/enterprise-logs
  # -- The version of Grafana Enterprise Logs
  tag: v1.4.0
  # -- Defines the policy how and when images are pulled
  pullPolicy: IfNotPresent
  # -- Additional image pull secrets
  pullSecrets: []

# -- Definition of the ServiceAccount for containers
# Any additional configuration of the ServiceAccount has to be done in
# `loki-simple-scalable.serviceAccount`.
serviceAccount:
  # -- Specifies whether a ServiceAccount should be created
  # If this value is changed to `false`, it also needs to be reflected in
  # `loki-simple-scalable.serviceAccount.create`.
  create: true

# -- External config.yaml
# A GEL configuration file may be provided as Kubernetes Secret outside of this Helm chart.
useExternalConfig: false
externalConfigName: enterprise-logs-config
externalConfigVersion: "0"

# -- External license.jwt
# A GEL license file may be provided as Kubernetes Secret outside of this Helm chart.
useExternalLicense: false
externalLicenseName: enterprise-logs-license
externalLicenseVersion: "0"

# -- Grafana Enterprise Logs license
# In order to use Grafana Enterprise Logs features, you will need to provide
# the contents of your Grafana Enterprise Logs license, either by providing the
# contents of the license.jwt, or the name Kubernetes Secret that contains your
# license.jwt.
# To set the license contents, use the flag `--set-file 'license.contents=./license.jwt'`
license:
  contents: "NOTAVALIDLICENSE"

# -- Grafana Enterprise Logs configuration file
config: |
  auth:
    type: enterprise

  auth_enabled: true

  license:
    path: /etc/enterprise-logs/license/license.jwt

  cluster_name: {{ .Release.Name }}

  {{- if .Values.commonConfig}}
  common:
  {{- toYaml .Values.commonConfig | nindent 2}}
  {{- end}}

  server:
    http_listen_port: 3100
    grpc_listen_port: 9095

  admin_client:
    storage:
      # TODO: type should not be necessary
      type: s3
      s3:
        bucket_name: enterprise-logs-admin

  ingester:
    max_chunk_age: '2h'

  ingester_client:
    grpc_client_config:
      max_recv_msg_size: 104857600
      max_send_msg_size: 104857600

  limits_config:
    enforce_metric_name: false
    reject_old_samples: true
    reject_old_samples_max_age: 168h
    max_cache_freshness_per_query: 10m

  memberlist:
    join_members:
      - {{ include "loki.fullname" . }}-memberlist

  querier:
    query_ingesters_within: 2h

  {{- if .Values.schemaConfig}}
  schema_config:
  {{- toYaml .Values.schemaConfig | nindent 2}}
  {{- end}}

  {{- if .Values.storageConfig}}
  storage_config:
  {{- toYaml .Values.storageConfig | nindent 2}}
  {{- end}}

  ruler:
    storage:
      s3:
        bucketnames: enterprise-logs-ruler
    enable_alertmanager_discovery: false
    enable_api: true
    enable_sharding: true

# -- Check https://grafana.com/docs/loki/latest/configuration/#common_config for more info on how to provide a common configuration
commonConfig:
  path_prefix: /var/loki
  replication_factor: 3
  storage:
    s3:
      endpoint: '{{ include "enterprise-logs.minio" . }}'
      bucketnames: enterprise-logs-tsdb
      secret_access_key: supersecret
      access_key_id: enterprise-logs
      s3forcepathstyle: true
      insecure: true

# -- Check https://grafana.com/docs/loki/latest/configuration/#schema_config for more info on how to configure schemas
schemaConfig:
  configs:
    - from: 2020-09-07
      store: boltdb-shipper
      object_store: filesystem
      schema: v11
      index:
        prefix: loki_index_
        period: 24h

# -- Check https://grafana.com/docs/loki/latest/configuration/#storage_config for more info on how to configure storages
storageConfig: {}
# -- Uncomment to configure each storage individually
# boltdb_shipper: {}
# filesystem: {}
# azure: {}
# gcs: {}
# s3: {}
#
#
# -- Structured GEL configuration, takes precedence over `loki.config`, `loki.schemaConfig`, `loki.storageConfig`
structuredConfig: {}

# -- Configuration for `tokengen` target
tokengen:
  # -- Whether the job should be part of the deployment
  enable: true
  # -- Name of the secret to store the admin token in
  adminTokenSecret: "gel-admin-token"
  # -- Additional CLI arguments for the `tokengen` target
  extraArgs: []
  # -- Additional Kubernetes environment
  env: []
  # -- Additional labels for the `tokengen` Job
  labels: {}
  # -- Additional annotations for the `tokengen` Job
  annotations: {}
  # -- Additional volumes for Pods
  extraVolumes: []
  # -- Additional volume mounts for Pods
  extraVolumeMounts: []
  # -- Run containers as user `enterprise-logs(uid=10001)`
  securityContext:
    runAsNonRoot: true
    runAsGroup: 10001
    runAsUser: 10001
    fsGroup: 10001

# ------------------------------------------------
# Configuration for `loki-simple-scalable` child chart
# ------------------------------------------------
loki-simple-scalable:
  # -- In order to have consistent Pod names for both pods from the enterprise-logs and loki-simple-scalable chart, we override the name of the child chart to match the name of the parent chart.
  nameOverride: enterprise-logs

  # -- Definition of the ServiceAccount for containers
  serviceAccount:
    # -- Specifies whether a ServiceAccount should be created
    create: true
    # -- The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the fullname template
    name: null
    # -- Image pull secrets for the service account
    imagePullSecrets: []
    # -- Annotations for the service account
    annotations: {}
    # -- Set this toggle to false to opt out of automounting API credentials for the service account
    automountServiceAccountToken: true

  # RBAC configuration
  rbac:
    # -- If enabled, a PodSecurityPolicy is created
    pspEnabled: true

  # -- Override gateway nginx.conf to include admin-api routes
  gateway:
    enabled: true
    nginxConfig:
      file: |
        worker_processes  5;  ## Default: 1
        error_log  /dev/stderr;
        pid        /tmp/nginx.pid;
        worker_rlimit_nofile 8192;

        events {
          worker_connections  4096;  ## Default: 1024
        }

        http {
          client_body_temp_path /tmp/client_temp;
          proxy_temp_path       /tmp/proxy_temp_path;
          fastcgi_temp_path     /tmp/fastcgi_temp;
          uwsgi_temp_path       /tmp/uwsgi_temp;
          scgi_temp_path        /tmp/scgi_temp;

          proxy_http_version    1.1;

          default_type application/octet-stream;
          log_format   {{ .Values.gateway.nginxConfig.logFormat }}

          {{- if .Values.gateway.verboseLogging }}
          access_log   /dev/stderr  main;
          {{- else }}

          map $status $loggable {
            ~^[23]  0;
            default 1;
          }
          access_log   /dev/stderr  main  if=$loggable;
          {{- end }}

          sendfile     on;
          tcp_nopush   on;
          resolver {{ .Values.global.dnsService }}.{{ .Values.global.dnsNamespace }}.svc.{{ .Values.global.clusterDomain }};

          {{- with .Values.gateway.nginxConfig.httpSnippet }}
          {{ . | nindent 2 }}
          {{- end }}

          server {
            listen             8080;

            {{- if .Values.gateway.basicAuth.enabled }}
            auth_basic           "Loki";
            auth_basic_user_file /etc/nginx/secrets/.htpasswd;
            {{- end }}

            location = / {
              return 200 'OK';
              auth_basic off;
            }

            location = /api/prom/push {
              proxy_pass       http://{{ include "loki.writeFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location = /api/prom/tail {
              proxy_pass       http://{{ include "loki.readFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /api/prom/.* {
              proxy_pass       http://{{ include "loki.readFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location = /loki/api/v1/push {
              proxy_pass       http://{{ include "loki.writeFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location = /loki/api/v1/tail {
              proxy_pass       http://{{ include "loki.readFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
              proxy_set_header Upgrade $http_upgrade;
              proxy_set_header Connection "upgrade";
            }

            location ~ /loki/api/.* {
              proxy_pass       http://{{ include "loki.readFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /admin/api/.* {
              proxy_pass       http://{{ include "loki.writeFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /compactor/.* {
              proxy_pass       http://{{ include "loki.readFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /distributor/.* {
              proxy_pass       http://{{ include "loki.writeFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /ring {
              proxy_pass       http://{{ include "loki.writeFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /ingester/.* {
              proxy_pass       http://{{ include "loki.writeFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /ruler/.* {
              proxy_pass       http://{{ include "loki.readFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            location ~ /scheduler/.* {
              proxy_pass       http://{{ include "loki.readFullname" . }}.{{ .Release.Namespace }}.svc.{{ .Values.global.clusterDomain }}:3100$request_uri;
            }

            {{- with .Values.gateway.nginxConfig.serverSnippet }}
            {{ . | nindent 4 }}
            {{- end }}
          }
        }

  # -- Configuration for the `write` target
  write:
    replicas: 3
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: enterprise-logs-license
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /etc/enterprise-logs/license

  # -- Configuration for the `read` target
  read:
    replicas: 3
    extraVolumes:
      # -- Create license volume from license secret
      - name: license
        secret:
          secretName: enterprise-logs-license
    extraVolumeMounts:
      # -- Mount the license volume
      - name: license
        mountPath: /etc/enterprise-logs/license

  loki:
    config: null
    existingSecretForConfig: enterprise-logs-config
    image: *image

# -------------------------------------
# Configuration for `minio` child chart
# -------------------------------------
minio:
  enabled: true
  accessKey: enterprise-logs
  secretKey: supersecret
  buckets:
    - name: enterprise-logs-tsdb
      policy: none
      purge: false
    - name: enterprise-logs-admin
      policy: none
      purge: false
    - name: enterprise-logs-ruler
      policy: none
      purge: false
  persistence:
    size: 5Gi
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
