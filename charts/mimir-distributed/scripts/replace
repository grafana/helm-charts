#!/usr/bin/env bash

set -euf -o pipefail

function usage {
  cat <<EOF
Perform a number of subsititutions in a template file
Uses 'sed -z' to perform multiline replacements. '^' and '$' will match the start and end of the file, not the line.

Usage:
  $0 <component> <file>

Examples:
  $0 alertmanager templates/alertmanager/alertmanager-statefulset.yaml
EOF
}

if [[ $# -ne 2 ]]; then
  usage
  exit 1
fi

# NO_DRY_RUN determines whether potentially destructive commands are run.
readonly NO_DRY_RUN="${NO_DRY_RUN:-0}"

# If NO_DRY_RUN is not set to a truthy value, output replacement to stdout.
# If it is truthy, perform the replacement in place.
SED=('sed' '-z' '-E' '-f/dev/stdin')
case "${NO_DRY_RUN}" in
  y | yes | Y | 1) SED+=('-i') ;;
  *) ;; # default
esac

# Convert kebab-case to camelCase.
# Only works with GNU sed.
function camel_case {
  sed -E -e 's/-(.)/\U\1/' <<<"$1"
}
# Convert kebab-case to snake_case.
function snake_case {
  sed -E -e 's/-/_/' <<<"$1"
}

component="$1"
camel_cased="$(camel_case "$1")"
snake_cased="$(snake_case "$1")"

# Example of updating labels
# update_app updates the .metadata.name, .metadata.labels, .spec.selector.matchLabels, and .spec.template.metadata.labels for an App like resource to use component specific helper templates.
# It is naïve and relies on indentation to for the correct field replacement.
update_app=$(
  cat <<EOF
s/  name: \{\{ template "mimir.fullname" . \}\}-${component}\n/  name: {{ include "mimir.${camel_cased}Fullname" . }}\n/
s/  labels:\n(    [^\n]*\n)+/  labels:\n    {{- include "mimir.${camel_cased}Labels" . | nindent 4 }}\n    {{- if .Values.useGEMLabels }}{{- include "mimir.gemExtraLabels" . | nindent 4 }}{{- end }}\n/
s/    matchLabels:\n(      [^\n]*\n)+/    matchLabels:\n      {{- include "mimir.${camel_cased}SelectorLabels" . | nindent 6 }}\n/
s/      labels:\n(        [^\n]*\n)+/      labels:\n        {{- include "mimir.${camel_cased}Labels" . | nindent 8 }}\n        {{- if .Values.useGEMLabels }}{{- include "mimir.gem${camel_cased^}PodLabels" . | nindent 8 }}{{- end }}\n        {{- with .Values.${snake_cased}.podLabels }}\n        {{- toYaml . | nindent 8 }}\n        {{- end }}\n/
s/  annotations:\n(    [^\n]*\n)+/  annotations:\n    {{- toYaml .Values.${snake_cased}.annotations | nindent 4 }}\n/
EOF
)
# update_service updates the .metadata.labels and .spec.selector for a Service to use
# component specific helper templates.
# It is naïve and relies on indentation to for the correct field replacement.
update_service=$(
  cat <<EOF
s/  labels:\n(    [^\n]*\n)+/  labels:\n    {{- include "mimir.${camel_cased}Labels" . | nindent 4 }}\n    {{- if .Values.useGEMLabels }}{{- include "mimir.gemExtraLabels" . | nindent 4 }}{{- end }}\n    {{- with .Values.${snake_cased}.service.labels }}\n    {{- toYaml . | nindent 4 }}\n    {{- end }}\n/
s/  selector:\n(    [^\n]*\n)+/  selector:\n    {{- include "mimir.${camel_cased}SelectorLabels" . | nindent 4 }}\n/
s/  annotations:\n(    [^\n]*\n)+/  annotations:\n    {{- toYaml .Values.${snake_cased}.service.annotations | nindent 4 }}\n/
EOF
)

if grep -iqE '^kind:[[:space:]]+service[[:space:]]*' "$2" ; then
  update_script="${update_service}"
else
  update_script="${update_app}"
fi

"${SED[@]}" -- "$2" <<<"${update_script}"
