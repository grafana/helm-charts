name: Release a chart

on:
  workflow_call:
    inputs:
      charts_dir:
        description: path to the helm charts
        default: charts
        required: false
        type: string
      cr_configfile:
        description: location of the chart releaser (cr) config file
        default: cr.yaml
        required: false
        type: string
      ct_configfile:
        description: location of the chart tester (ct) config file
        default: ct.yaml
        required: false
        type: string
      helm_tag_prefix:
        description: prefix to use when publishing helm tags
        default: ""
        required: false
        type: string
    secrets:
      github_app_id:
        description: Github App ID to authenticate with
        required: false
      github_app_pem:
        description: GitHub APP pem to authenticate with
        required: false
      vault_repo_secret_name:
        description: Vault secret name that holds repository's GitHub App credentials to authenticate with
        required: false
      helm_repo_token:
        description: GitHub api token to use against the helm-charts repository
        required: false

env:
  CR_CONFIGFILE: "${{ github.workspace }}/source/${{ inputs.cr_configfile }}"
  CT_CONFIGFILE: "${{ github.workspace }}/source/${{ inputs.ct_configfile }}"
  CR_INDEX_PATH: "${{ github.workspace }}/.cr-index"
  CR_PACKAGE_PATH: "${{ github.workspace }}/.cr-release-packages"
  CR_TOOL_PATH: "${{ github.workspace }}/.cr-tool"
  HELM_TAG_PREFIX: "${{ inputs.helm_tag_prefix }}"
  REF_NAME: "${{ github.ref_name }}"

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      changed: ${{ steps.list-changed.outputs.changed }}
      chartpath: ${{ steps.list-changed.outputs.chartpath }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: source
          persist-credentials: false

      - name: Set up chart-testing
        uses: helm/chart-testing-action@5f16c27cf7a4fa9c776ff73734df3909b2b65127 # v2.1.0

      - name: List changed charts
        id: list-changed
        run: |
          cd source

          latest_tag=$( if ! git describe --tags --abbrev=0 2> /dev/null ; then git rev-list --max-parents=0 --first-parent HEAD ; fi )

          echo "Running: ct list-changed --config ${CT_CONFIGFILE} --since ${latest_tag} --target-branch ${REF_NAME}"
          changed=$(ct list-changed --config "${CT_CONFIGFILE}" --since "${latest_tag}" --target-branch "${REF_NAME}")
          echo "${changed}"
          num_changed=$(wc -l <<< ${changed})
          if [[ "${num_changed}" -gt "1" ]] ; then
            echo "More than one chart changed, exiting"
            exit 1
          fi
          if [[ -n "${changed}" ]]; then
            name=$(yq ".name" < ${changed}/Chart.yaml)
            version=$(yq ".version" < ${changed}/Chart.yaml)

            if [ $(git tag -l "${name}-${version}") ]; then
              echo "Tag ${tagname} already exists, skipping release"
              echo "changed=false" >> $GITHUB_OUTPUT
            else
              echo "Releasing ${changed}"
              echo "changed=true" >> $GITHUB_OUTPUT
              echo "chartpath=${changed}" >> $GITHUB_OUTPUT
            fi
          else
            echo "No charts have changed, skipping release"
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

  release:
    needs: [setup]
    runs-on: ubuntu-latest
    permissions:
      id-token: write # allows GitHub App to generate id-token from Github's OIDC
      contents: write # allows GITHUB_TOKEN to push chart release, create release, and push tags to github
      packages: write # allows GITHUB_TOKEN to push package to ghcr
    env:
      # APP_ID and PRIVATE_KEY are overwritten by credentials from vault, if configured
      GITHUB_APP_ID: ${{ secrets.github_app_id }}
      PRIVATE_KEY: ${{ secrets.github_app_pem }}
      VAULT_REPO_SECRET_NAME: ${{ secrets.vault_repo_secret_name }}
    if: needs.setup.outputs.changed == 'true'
    steps:
      - name: Retrieve GitHub App credentials from Vault
        if: env.VAULT_REPO_SECRET_NAME != ''
        id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@28361cdb22223e5f1e34358c86c20908e7248760 # v1.1.0
        with:
          repo_secrets: |
            GITHUB_APP_ID=${{ env.VAULT_REPO_SECRET_NAME }}:app-id
            PRIVATE_KEY=${{ env.VAULT_REPO_SECRET_NAME }}:private-key

      - name: Generate GitHub App Token
        if: env.GITHUB_APP_ID != ''
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          # Variables generated by the previous step get-secrets
          app-id: ${{ env.GITHUB_APP_ID }}
          private-key: ${{ env.PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}

      - name: Set the correct token (Github App or PAT)
        env:
          HELM_REPO_TOKEN: ${{ secrets.helm_repo_token }}
          APP_TOKEN: ${{ steps.app-token.outputs.token }}
        run: |
          if [[ "${GITHUB_APP_ID}" == '' ]]; then
            echo "AUTHTOKEN=${HELM_REPO_TOKEN}" >> $GITHUB_ENV
          else
            echo "AUTHTOKEN=${APP_TOKEN}" >> $GITHUB_ENV
          fi

      - name: Checkout
        uses: actions/checkout@v4 # zizmor: ignore[artipacked] without this ignore comment, zizmor would complain that persist-credentials is not explicitly set to false. We need it set to true (default) to be able to push the release tags later on in this workflow
        with:
          fetch-depth: 0
          path: source

      - name: Configure Git
        run: |
          cd source
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Checkout helm-charts
        # The cr tool only works if the target repository is already checked out
        uses: actions/checkout@v4 # zizmor: ignore[artipacked] without this ignore comment, zizmor would complain that persist-credentials is not explicitly set to false. We need it set to true (default) to be able to push the release tags later on in this workflow
        with:
          fetch-depth: 0
          repository: grafana/helm-charts
          path: helm-charts
          token: ${{ env.AUTHTOKEN }}

      - name: Configure Git for helm-charts
        run: |
          cd helm-charts
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@b9e51907a09c216f16ebe8536097933489208112 # v4.3.0
        with:
          version: v3.16.2

      - name: Parse Chart.yaml
        id: parse-chart
        env:
          CHARTPATH: ${{ needs.setup.outputs.chartpath }}
        run: |
          cd source
          changed="${CHARTPATH}"
          description=$(yq ".description" < ${changed}/Chart.yaml)
          name=$(yq ".name" < ${changed}/Chart.yaml)
          version=$(yq ".version" < ${changed}/Chart.yaml)
          echo "chartpath=${changed}" >> $GITHUB_OUTPUT
          echo "desc=${description}" >> $GITHUB_OUTPUT
          if [[ -n "${HELM_TAG_PREFIX}" ]]; then
            echo "tagname=${HELM_TAG_PREFIX}-${name}-${version}" >> $GITHUB_OUTPUT
          else
            echo "tagname=${name}-${version}" >> $GITHUB_OUTPUT
          fi
          echo "packagename=${name}-${version}" >> $GITHUB_OUTPUT

      - name: Add dependency chart repos
        env:
          CHARTPATH: ${{ steps.parse-chart.outputs.chartpath }}
        run: |
          cd source
          # Skip the header line and make sure that tabs are expanded into spaces
          deps=$(helm dependency list "${CHARTPATH}" | tail +2 | expand)
          while read -r row; do
            IFS=' ' read -ra parts <<< "$row"
            name="${parts[0]}"
            repo="${parts[2]}"
            case "$repo" in
              "https://"*) helm repo add "$name" "$repo" ;;
              *) echo >&2 "Skipping dependency $name: unsupported schema for \"$repo\"" ;;
            esac
          done <<< "$deps"

      - name: Install CR tool
        run: |
          mkdir "${CR_TOOL_PATH}"
          mkdir "${CR_PACKAGE_PATH}"
          mkdir "${CR_INDEX_PATH}"
          curl -sSLo cr.tar.gz "https://github.com/helm/chart-releaser/releases/download/v1.4.0/chart-releaser_1.4.0_linux_amd64.tar.gz"
          tar -xzf cr.tar.gz -C "${CR_TOOL_PATH}"
          rm -f cr.tar.gz

      - name: Create helm package
        env:
          CHARTPATH: ${{ steps.parse-chart.outputs.chartpath }}
        run: |
          cd source
          "${CR_TOOL_PATH}/cr" package "${CHARTPATH}" --config "${CR_CONFIGFILE}" --package-path "${CR_PACKAGE_PATH}"
          echo "Result of chart package:"
          ls -l "${CR_PACKAGE_PATH}"

      - name: Create tag and check if exists on origin
        env:
          TAGNAME: ${{ steps.parse-chart.outputs.tagname }}
        run: |
          cd source
          echo "Making tag ${TAGNAME}"
          git tag "${TAGNAME}"

      - name: Make github release
        uses: softprops/action-gh-release@de2c0eb89ae2a093876385947365aca7b0e5f844 # tags/v1
        with:
          body: |
            ${{ steps.parse-chart.outputs.desc }}

            Source commit: https://github.com/${{ github.repository }}/commit/${{ github.sha }}

            Tag on source: https://github.com/${{ github.repository }}/releases/tag/${{ steps.parse-chart.outputs.tagname }}
          files: |
            ${{ env.CR_PACKAGE_PATH }}/${{ steps.parse-chart.outputs.packagename }}.tgz
            ${{ env.CR_PACKAGE_PATH }}/${{ steps.parse-chart.outputs.packagename }}.tgz.prov
          repository: grafana/helm-charts
          tag_name: ${{ steps.parse-chart.outputs.tagname }}
          token: ${{ env.AUTHTOKEN }}

      - name: Push release tag on origin
        env:
          TAGNAME: ${{ steps.parse-chart.outputs.tagname }}
        run: |
          cd source
          echo "Pushing tag ${TAGNAME}"
          git push origin "${TAGNAME}"

      - name: Update helm repo index.yaml
        run: |
          cd helm-charts
          "${CR_TOOL_PATH}/cr" index --config "${CR_CONFIGFILE}" --token "${{ env.AUTHTOKEN }}" --index-path "${CR_INDEX_PATH}" --package-path "${CR_PACKAGE_PATH}" --push

      - name: Login to GHCR
        uses: docker/login-action@343f7c4344506bcbf9b4de18042ae17996df046d # v3.0.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          # GitHub App installation token cannot push package to the org's package registry;
          # using GITHUB_TOKEN here instead to avoid using PAT.
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push charts to GHCR
        env:
          PACKAGENAME: ${{ steps.parse-chart.outputs.packagename }}
        run: |
          helm push "${CR_PACKAGE_PATH}/${PACKAGENAME}.tgz" "oci://ghcr.io/${GITHUB_REPOSITORY_OWNER}/helm-charts"
