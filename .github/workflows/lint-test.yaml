name: Lint and Test Charts

on:
  workflow_call:
    inputs:
      ct_configfile:
        description: location of the ct config file
        default: ct.yaml
        required: false
        type: string
      ct_check_version_increment:
        description: whether to check for version bump requirement
        default: true
        required: false
        type: boolean
      helm_version:
        description: version of the helm binary
        default: v3.18.6
        required: false
        type: string
      kind_kubectl_version:
        description: version of the kubectl binary used for the kind cluster
        required: false
        type: string
      kind_node_image:
        description: image reference for the node containers in the kind_cluster
        required: false
        type: string

env:
  CT_CONFIGFILE: ${{ inputs.ct_configfile }}
  CT_CHECK_VERSION_INCREMENT: ${{ inputs.ct_check_version_increment }}

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Set up Helm
        uses: azure/setup-helm@1a275c3b69536ee54be43f2070a358922e12c8d4 # v4.3.1
        with:
          version: ${{ inputs.helm_version }}

      # Python is required because `ct lint` runs Yamale (https://github.com/23andMe/Yamale) and
      # yamllint (https://github.com/adrienverge/yamllint) which require Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.13

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: install helm unittest plugin
        run: helm plugin install https://github.com/helm-unittest/helm-unittest.git --version 1.0.1

      - name: Run chart-testing (list-changed)
        id: list-changed
        run: |
          changed=$(ct list-changed --config "${CT_CONFIGFILE}")
          if [[ -n "$changed" ]]; then
            echo "changed=true" >> "$GITHUB_OUTPUT"
          fi

      - name: Run chart-testing (lint)
        run: ct lint --config "${CT_CONFIGFILE}" --check-version-increment="${CT_CHECK_VERSION_INCREMENT}"

      - name: Create kind cluster
        uses: helm/kind-action@dda0770415bac9fc20092cacbc54aa298604d140 # v1.8.0
        if: steps.list-changed.outputs.changed == 'true'
        with:
          kubectl_version: ${{ inputs.kind_kubectl_version }}
          node_image: ${{ inputs.kind_node_image }}

      - name: Check Kubernetes version and apply Gateway API CRDs
        if: steps.list-changed.outputs.changed == 'true'
        run: |
          # Get Kubernetes version and extract the major.minor version
          version=$(kubectl version -o json | jq -r '.serverVersion.major + "." + .serverVersion.minor' | tr -d '+')
          major_version=$(echo $version | cut -d. -f1)
          minor_version=$(echo $version | cut -d. -f2)
          
          # Compare version with 1.23. The gateway CRDs use x-kubernetes-validations, which is only supported from 1.23 onwards.
          if [ "$major_version" -eq 1 ] && [ "$minor_version" -ge 23 ] || [ "$major_version" -gt 1 ]; then
            echo "Kubernetes version $version >= 1.23, applying Gateway API CRDs"
            kubectl apply -k https://github.com/kubernetes-sigs/gateway-api/config/crd
          else
            echo "Kubernetes version $version < 1.23, skipping Gateway API CRDs installation"
            echo "Please use an older version of Gateway API CRDs or upgrade your Kubernetes version"
          fi

      - name: Run chart-testing (install)
        run: |
          changed=$(ct list-changed --config "${CT_CONFIGFILE}")
          if [[ "$changed" == "charts/enterprise-metrics" ]]; then
            # Do not run `ct install` for enterprise-metrics
            exit 0
          elif [[ "$changed" == "charts/snyk-exporter" ]]; then
            # Do not run `ct install` for snyk-exporter as it requires Snyk API token
            exit 0
          elif [[ "$changed" == "charts/cloudcost-exporter" ]]; then
            # Do not run `ct install` for cloudcost-exporter as it requires IRSA
            exit 0
          fi
          ct install --config "${CT_CONFIGFILE}"
